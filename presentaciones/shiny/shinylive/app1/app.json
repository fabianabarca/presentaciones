[{"name": "app.py", "content": "from pathlib import Path\n\nimport astropy.units as u\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom body import body_server, body_ui\nfrom faicons import icon_svg\nfrom shiny import App, reactive, render, ui\nfrom simulation import Simulation, nbody_solve\n\n# This application adapted from RK4 Orbit Integrator tutorial in Python for Astronomers\n# https://prappleizer.github.io/\n\n\napp_ui = ui.page_sidebar(\n    ui.sidebar(\n        ui.img(\n            src=\"coords.png\", style=\"width: 100%; max-width: 225px;\", class_=\"border\"\n        ),\n        ui.accordion(\n            ui.accordion_panel(\n                \"Settings\",\n                ui.input_slider(\"days\", \"Simulation duration (days)\", 0, 200, value=60),\n                ui.input_slider(\n                    \"step_size\",\n                    \"Simulation time step (hours)\",\n                    0,\n                    24,\n                    value=4,\n                    step=0.5,\n                ),\n            ),\n            ui.accordion_panel(\n                \"Earth\",\n                body_ui(\n                    \"earth\", enable=True, mass=597.216, speed=0.0126, theta=270, phi=90\n                ),\n            ),\n            ui.accordion_panel(\n                \"Moon\",\n                body_ui(\"moon\", enable=True, mass=7.347, speed=1.022, theta=60, phi=90),\n            ),\n            ui.accordion_panel(\n                \"Planet X\",\n                body_ui(\n                    \"planetx\", enable=True, mass=7.347, speed=1.022, theta=270, phi=60\n                ),\n            ),\n            # mt-4: margin top 4; adds a bit of space above the accordion\n            class_=\"mt-4\",\n            # Give the accordion the same background color as the sidebar\n            style=\"--bs-accordion-bg: --bslib-sidebar-bg;\",\n        ),\n        position=\"right\",\n        open=\"always\",\n        # In mobile mode, let the sidebar be as tall as it wants\n        max_height_mobile=\"auto\",\n    ),\n    ui.div(\n        ui.input_action_button(\n            \"run\", \"Run simulation\", icon=icon_svg(\"play\"), class_=\"btn-primary\"\n        )\n    ),\n    ui.output_plot(\"orbits\"),\n)\n\n\ndef server(input, output, session):\n    earth_body = body_server(\"earth\", \"Earth\", [0, 0, 0])\n    moon_body = body_server(\"moon\", \"Moon\", [3.84e5, 0, 0])\n    planetx_body = body_server(\"planetx\", \"Planet X\", [-3.84e5, 0, 0])\n\n    @reactive.Calc()\n    def simulation():\n        bodies = [\n            x for x in [earth_body(), moon_body(), planetx_body()] if x is not None\n        ]\n\n        sim = Simulation(bodies)\n        sim.set_diff_eq(nbody_solve)\n\n        n_steps = input.days() * 24 / input.step_size()\n        with ui.Progress(min=1, max=n_steps) as p:\n            sim.run(input.days() * u.day, input.step_size() * u.hr, progress=p)\n\n        return sim.history\n\n    @output\n    @render.plot\n    # ignore_none=False is used to instruct Shiny to render this plot even before the\n    # input.run button is clicked for the first time. We do this because we want to\n    # render the empty 3D space on app startup, to give the user a sense of what's about\n    # to happen when they run the simulation.\n    @reactive.event(input.run, ignore_none=False)\n    def orbits():\n        fig = plt.figure()\n        ax = plt.axes(projection=\"3d\")\n\n        if input.run() > 0:\n            sim_hist = simulation()\n            end_idx = len(sim_hist) - 1\n\n            n_bodies = int(sim_hist.shape[1] / 6)\n            for i in range(0, n_bodies):\n                ax.scatter3D(\n                    sim_hist[end_idx, i * 6],\n                    sim_hist[end_idx, i * 6 + 1],\n                    sim_hist[end_idx, i * 6 + 2],\n                    s=50,\n                )\n                ax.plot3D(\n                    sim_hist[:, i * 6],\n                    sim_hist[:, i * 6 + 1],\n                    sim_hist[:, i * 6 + 2],\n                )\n\n        ax.view_init(30, 20)\n        set_axes_equal(ax)\n\n        return fig\n\n\nwww_dir = Path(__file__).parent / \"www\"\napp = App(app_ui, server, static_assets=www_dir)\n\n\n# https://stackoverflow.com/a/31364297/412655\ndef set_axes_equal(ax):\n    \"\"\"Make axes of 3D plot have equal scale so that spheres appear as spheres,\n    cubes as cubes, etc..  This is one possible solution to Matplotlib's\n    ax.set_aspect('equal') and ax.axis('equal') not working for 3D.\n\n    Input\n      ax: a matplotlib axis, e.g., as output from plt.gca().\n    \"\"\"\n\n    x_limits = ax.get_xlim3d()\n    y_limits = ax.get_ylim3d()\n    z_limits = ax.get_zlim3d()\n\n    x_range = abs(x_limits[1] - x_limits[0])\n    x_middle = np.mean(x_limits)\n    y_range = abs(y_limits[1] - y_limits[0])\n    y_middle = np.mean(y_limits)\n    z_range = abs(z_limits[1] - z_limits[0])\n    z_middle = np.mean(z_limits)\n\n    # The plot bounding box is a sphere in the sense of the infinity\n    # norm, hence I call half the max range the plot radius.\n    plot_radius = 0.5 * max([x_range, y_range, z_range])\n\n    ax.set_xlim3d([x_middle - plot_radius, x_middle + plot_radius])\n    ax.set_ylim3d([y_middle - plot_radius, y_middle + plot_radius])\n    ax.set_zlim3d([z_middle - plot_radius, z_middle + plot_radius])\n", "type": "text"}, {"name": "body.py", "content": "\"\"\"Body Shiny module\n\nA Shiny module that represents a body (i.e. planet/moon) in the simulation. This allows\nus to have multiple bodies in the simulation, each sharing similar UI and server logic,\nwithout having to repeat the code.\n\nLearn more about Shiny modules at: https://shiny.posit.co/py/docs/workflow-modules.html\n\"\"\"\nimport astropy.units as u\nimport numpy as np\nfrom shiny import module, reactive, ui\nfrom simulation import Body, spherical_to_cartesian\n\n\n@module.ui\ndef body_ui(enable, mass, speed, theta, phi):\n    return ui.TagList(\n        ui.input_checkbox(\"enable\", \"Enable\", enable),\n        ui.panel_conditional(\n            \"input.enable\",\n            ui.input_numeric(\n                \"mass\",\n                \"Mass (10^22 kg)\",\n                mass,\n            ),\n            ui.input_slider(\n                \"speed\",\n                \"Speed (km/s)\",\n                0,\n                1,\n                value=speed,\n                step=0.001,\n            ),\n            ui.input_slider(\"theta\", \"Angle (5\u0003)\", 0, 360, value=theta),\n            ui.input_slider(\"phi\", \"5\u0019\", 0, 180, value=phi),\n        ),\n    )\n\n\n@module.server\ndef body_server(input, output, session, label, start_vec):\n    @reactive.Calc\n    def body_result():\n        if not input.enable():\n            return None\n\n        v = spherical_to_cartesian(input.theta(), input.phi(), input.speed())\n\n        return Body(\n            mass=input.mass() * 1e22 * u.kg,\n            x_vec=np.array(start_vec) * u.km,\n            v_vec=np.array(v) * u.km / u.s,\n            name=label,\n        )\n\n    return body_result\n", "type": "text"}, {"name": "requirements.txt", "content": "astropy\n", "type": "text"}, {"name": "simulation.py", "content": "import time\nfrom typing import Any\n\nimport astropy.constants as c\nimport numpy as np\n\n# Adapted from Python for Astronomers: An Introduction to Scientific Computing\n# by Imad Pasha & Christopher Agostino\n# https://prappleizer.github.io/Tutorials/RK4/RK4_Tutorial.html\n\n# Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License\n# http://creativecommons.org/licenses/by-nc-sa/4.0/\n\n\nclass Body:\n    def __init__(self, mass, x_vec, v_vec, name=None, has_units=True):\n        \"\"\"\n        spawn instance of the Body class, which is used in Simulations.\n\n        :param: mass | mass of particle. if has_units=True, an Astropy Quantity, otherwise a float\n        :param: x_vec | a vector len(3) containing the x, y, z initial positions of the body.\n                     the array can be unitless if has_units=False, or be of the form np.array([0,0,0])*u.km\n        :param: v_vec | vector len(3) containing the v_x, v_y, v_z initial velocities of the body.\n        :param: name | string containing a name, used for plotting later\n        :param: has_units | defines how the code treats the problem, as unit-ed, or unitless.\n        \"\"\"\n        self.name = name\n        self.has_units = has_units\n        if self.has_units:\n            self.mass = mass.cgs\n            self.x_vec = x_vec.cgs.value\n            self.v_vec = v_vec.cgs.value\n        else:\n            self.mass = mass\n            self.x_vec = x_vec\n            self.v_vec = v_vec\n\n    def return_vec(self):\n        \"\"\"\n        Concatenates the x and v vector into 1 vector 'y' used in RK formalism.\n        \"\"\"\n        return np.concatenate((self.x_vec, self.v_vec))\n\n    def return_mass(self):\n        \"\"\"\n        handler to strip the mass units if present (after converting to cgs) or return float\n        \"\"\"\n        if self.has_units:\n            return self.mass.cgs.value\n        else:\n            return self.mass\n\n    def return_name(self):\n        return self.name\n\n\nclass Simulation:\n    def __init__(self, bodies, has_units=True):\n        \"\"\"\n        Initializes instance of Simulation object.\n        -------------------------------------------\n        Params:\n            bodies (list): a list of Body() objects\n            has_units (bool): set whether bodies entered have units or not.\n        \"\"\"\n        self.has_units = has_units\n        self.bodies = bodies\n        self.N_bodies = len(self.bodies)\n        self.nDim = 6.0\n        self.quant_vec = np.concatenate(np.array([i.return_vec() for i in self.bodies]))\n        self.mass_vec = np.array([i.return_mass() for i in self.bodies])\n        self.name_vec = [i.return_name() for i in self.bodies]\n\n    def set_diff_eq(self, calc_diff_eqs, **kwargs):\n        \"\"\"\n        Method which assigns an external solver function as the diff-eq solver for RK4.\n        For N-body or gravitational setups, this is the function which calculates accelerations.\n        ---------------------------------\n        Params:\n            calc_diff_eqs: A function which returns a [y] vector for RK4\n            **kwargs: Any additional inputs/hyperparameters the external function requires\n        \"\"\"\n        self.diff_eq_kwargs = kwargs\n        self.calc_diff_eqs = calc_diff_eqs\n\n    def rk4(self, t, dt):\n        \"\"\"\n        RK4 integrator. Calculates the K values and returns a new y vector\n        --------------------------------\n        Params:\n            t: a time. Only used if the diff eq depends on time (gravity doesn't).\n            dt: timestep. Non adaptive in this case\n        \"\"\"\n        k1 = dt * self.calc_diff_eqs(\n            t, self.quant_vec, self.mass_vec, **self.diff_eq_kwargs\n        )\n        k2 = dt * self.calc_diff_eqs(\n            t + 0.5 * dt,\n            self.quant_vec + 0.5 * k1,\n            self.mass_vec,\n            **self.diff_eq_kwargs,\n        )\n        k3 = dt * self.calc_diff_eqs(\n            t + 0.5 * dt,\n            self.quant_vec + 0.5 * k2,\n            self.mass_vec,\n            **self.diff_eq_kwargs,\n        )\n        k4 = dt * self.calc_diff_eqs(\n            t + dt, self.quant_vec + k2, self.mass_vec, **self.diff_eq_kwargs\n        )\n\n        y_new = self.quant_vec + ((k1 + 2 * k2 + 2 * k3 + k4) / 6.0)\n\n        return y_new\n\n    def run(self, T, dt, t0=0, progress=None):\n        \"\"\"\n        Method which runs the simulation on a given set of bodies.\n        ---------------------\n        Params:\n            T: total time (in simulation units) to run the simulation. Can have units or not, just set has_units appropriately.\n            dt: timestep (in simulation units) to advance the simulation. Same as above\n            t0 (optional): set a non-zero start time to the simulation.\n            progress (optional): A shiny.ui.Progress object which will be used to send progress updates.\n\n        Returns:\n            None, but leaves an attribute history accessed via\n            'simulation.history' which contains all y vectors for the simulation.\n            These are of shape (Nstep,Nbodies * 6), so the x and y positions of particle 1 are\n            simulation.history[:,0], simulation.history[:,1], while the same for particle 2 are\n            simulation.history[:,6], simulation.history[:,7]. Velocities are also extractable.\n        \"\"\"\n        if not hasattr(self, \"calc_diff_eqs\"):\n            raise AttributeError(\"You must set a diff eq solver first.\")\n        if self.has_units:\n            try:\n                _ = t0.unit\n            except Exception:\n                t0 = (t0 * T.unit).cgs.value\n            T = T.cgs.value\n            dt = dt.cgs.value\n\n        self.history: Any = [self.quant_vec]\n        clock_time = t0\n        nsteps = int((T - t0) / dt)\n        for step in range(nsteps):\n            if progress is not None and step % 5 == 0:\n                progress.set(\n                    step,\n                    message=f\"Integrating step = {step} / {nsteps}\",\n                    detail=f\"Elapsed time = {round(clock_time/1e6, 1)}\",\n                )\n            y_new = self.rk4(0, dt)\n            self.history.append(y_new)\n            self.quant_vec = y_new\n            clock_time += dt\n        self.history = np.array(self.history)\n\n\ndef nbody_solve(t, y, masses):\n    N_bodies = int(len(y) / 6)\n    solved_vector = np.zeros(y.size)\n    for i in range(N_bodies):\n        ioffset = i * 6\n        for j in range(N_bodies):\n            joffset = j * 6\n            solved_vector[ioffset] = y[ioffset + 3]\n            solved_vector[ioffset + 1] = y[ioffset + 4]\n            solved_vector[ioffset + 2] = y[ioffset + 5]\n            if i != j:\n                dx = y[ioffset] - y[joffset]\n                dy = y[ioffset + 1] - y[joffset + 1]\n                dz = y[ioffset + 2] - y[joffset + 2]\n                r = (dx**2 + dy**2 + dz**2) ** 0.5\n                ax = (-c.G.cgs * masses[j] / r**3) * dx\n                ay = (-c.G.cgs * masses[j] / r**3) * dy\n                az = (-c.G.cgs * masses[j] / r**3) * dz\n                ax = ax.value\n                ay = ay.value\n                az = az.value\n                solved_vector[ioffset + 3] += ax\n                solved_vector[ioffset + 4] += ay\n                solved_vector[ioffset + 5] += az\n    return solved_vector\n\n\ndef spherical_to_cartesian(\n    theta: float, phi: float, rho: float\n) -> tuple[float, float, float]:\n    x = rho * sind(phi) * cosd(theta)\n    y = rho * sind(phi) * sind(theta)\n    z = rho * cosd(phi)\n    return (x, y, z)\n\n\ndef cosd(x):\n    return np.cos(x / 180 * np.pi)\n\n\ndef sind(x):\n    return np.sin(x / 180 * np.pi)\n", "type": "text"}, {"name": "www\\coords.png", "content": "", "type": "binary"}]